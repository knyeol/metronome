[{"I:\\Code\\personal-projects\\metronome\\src\\App.js":"1","I:\\Code\\personal-projects\\metronome\\src\\index.js":"2","I:\\Code\\personal-projects\\metronome\\src\\components\\Bpm.js":"3","I:\\Code\\personal-projects\\metronome\\src\\components\\Click.js":"4","I:\\Code\\personal-projects\\metronome\\src\\components\\Tap.js":"5","I:\\Code\\personal-projects\\metronome\\src\\components\\Accuracy.js":"6"},{"size":769,"mtime":1608387780542,"results":"7","hashOfConfig":"8"},{"size":219,"mtime":1608405614255,"results":"9","hashOfConfig":"8"},{"size":1420,"mtime":1608406944300,"results":"10","hashOfConfig":"8"},{"size":1838,"mtime":1608412479855,"results":"11","hashOfConfig":"8"},{"size":809,"mtime":1608387875826,"results":"12","hashOfConfig":"8"},{"size":1455,"mtime":1608408293998,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1o6sa55",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"I:\\Code\\personal-projects\\metronome\\src\\App.js",[],"I:\\Code\\personal-projects\\metronome\\src\\index.js",[],["29","30"],"I:\\Code\\personal-projects\\metronome\\src\\components\\Bpm.js",[],"I:\\Code\\personal-projects\\metronome\\src\\components\\Click.js",["31","32"],"import { useState, useEffect } from \"react\";\r\n\r\nexport default function Click({ delay, nextTime, setNextTime }) {\r\n  const [clickTimeout, setClickTimeout] = useState();\r\n  const [clickInterval, setClickInterval] = useState();\r\n  const [volume, setVolume] = useState(100);\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const click = new Audio(\r\n    \"https://firebasestorage.googleapis.com/v0/b/metronome-adc80.appspot.com/o/click.wav?alt=media&token=1675b659-a78e-43b4-bd7e-a12f5477903b\"\r\n  );\r\n\r\n  function clearClicks() {\r\n    clickInterval && clearInterval(clickInterval);\r\n    clickTimeout && clearTimeout(clickTimeout);\r\n  }\r\n\r\n  function playClick() {\r\n    setNextTime(Date.now() + delay);\r\n    click.volume = volume / 100;\r\n    click.load();\r\n    click.play();\r\n  }\r\n\r\n  function createInterval() {\r\n    const cb = setInterval(() => playClick(), delay);\r\n    clearClicks();\r\n    playClick();\r\n    setClickInterval(cb);\r\n  }\r\n\r\n  function createTimeout() {\r\n    const interval = nextTime - Date.now();\r\n    const cb = setTimeout(() => createInterval(), interval);\r\n    clearClicks();\r\n    setClickTimeout(cb);\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (isPlaying && Date.now() < nextTime) return createTimeout();\r\n  }, [delay, volume]);\r\n\r\n  useEffect(() => {\r\n    if (!isPlaying) return clearClicks();\r\n    createInterval();\r\n  }, [isPlaying]);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"slider-container\">\r\n        <span className=\"slider-text\">ðŸ”Š</span>\r\n        <input\r\n          className=\"slider\"\r\n          type=\"range\"\r\n          value={volume}\r\n          onChange={e => setVolume(e.target.value)}\r\n        />\r\n      </div>\r\n      <div>\r\n        <button className=\"bpm-button\" onClick={() => setIsPlaying(p => !p)}>\r\n          {isPlaying ? \"Stop\" : \"Start\"}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","I:\\Code\\personal-projects\\metronome\\src\\components\\Tap.js",["33"],"import { useState, useEffect } from \"react\";\r\n\r\nfunction Tap({ setDelay }) {\r\n  const [tapTime, setTapTime] = useState();\r\n  const [timeArray, setTimeArray] = useState([]);\r\n  const maxWait = 3000;\r\n\r\n  function onClick() {\r\n    if (!tapTime) return setTapTime(Date.now());\r\n\r\n    setTapTime(prevTime => {\r\n      const difference = Date.now() - prevTime;\r\n      difference > maxWait\r\n        ? setTimeArray([])\r\n        : setTimeArray(arr => [...arr, difference]);\r\n\r\n      return Date.now();\r\n    });\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!timeArray.length) return;\r\n\r\n    const sum = timeArray.reduce((acc, cur) => acc + cur);\r\n    setDelay(sum / timeArray.length);\r\n  }, [timeArray]);\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={onClick}>Tap Tempo</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Tap;\r\n","I:\\Code\\personal-projects\\metronome\\src\\components\\Accuracy.js",[],{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":40,"column":6,"nodeType":"40","endLine":40,"endColumn":21,"suggestions":"41"},{"ruleId":"38","severity":1,"message":"42","line":45,"column":6,"nodeType":"40","endLine":45,"endColumn":17,"suggestions":"43"},{"ruleId":"38","severity":1,"message":"44","line":26,"column":6,"nodeType":"40","endLine":26,"endColumn":17,"suggestions":"45"},"no-native-reassign",["46"],"no-negated-in-lhs",["47"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'createTimeout', 'isPlaying', and 'nextTime'. Either include them or remove the dependency array.","ArrayExpression",["48"],"React Hook useEffect has missing dependencies: 'clearClicks' and 'createInterval'. Either include them or remove the dependency array.",["49"],"React Hook useEffect has a missing dependency: 'setDelay'. Either include it or remove the dependency array. If 'setDelay' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["50"],"no-global-assign","no-unsafe-negation",{"desc":"51","fix":"52"},{"desc":"53","fix":"54"},{"desc":"55","fix":"56"},"Update the dependencies array to be: [createTimeout, delay, isPlaying, nextTime, volume]",{"range":"57","text":"58"},"Update the dependencies array to be: [clearClicks, createInterval, isPlaying]",{"range":"59","text":"60"},"Update the dependencies array to be: [setDelay, timeArray]",{"range":"61","text":"62"},[1229,1244],"[createTimeout, delay, isPlaying, nextTime, volume]",[1342,1353],"[clearClicks, createInterval, isPlaying]",[673,684],"[setDelay, timeArray]"]